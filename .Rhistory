labRow=ordered_data$`Gene Symbol`)
View(gene_cluster)
gene_cluster
ordered_data
set.seed(123) # for reproducibility
k <- 1 # for example, you can change this based on your data
kmeans_result <- kmeans(t(sig_gene_data[, -c(1, ncol(sig_gene_data))]), centers=k) # excluding the ID and Gene Symbol columns
ordered_data <- sig_gene_data[order(kmeans_result$cluster), ]
View(ordered_data)
heatmap.2(as.matrix(ordered_data[, -c(1, ncol(ordered_data))]),
scale="row",
trace="none",
margin=c(5,10),
cexRow=0.5,
cexCol=0.5,
col=colorRampPalette(c("blue", "white", "red"))(255),
main=paste("K-means clustering with k =", k),
labRow=ordered_data$`Gene Symbol`)
dim(sig_gene_data)
dim(clustering_data)
length(gene_cluster$order)
length(gene_cluster$order)
\
dist_matrix <- dist(t(clustering_data))
gene_cluster <- hclust(dist_matrix)
summary(clustering_data)
clustering_data_clean <- na.omit(clustering_data)
View(clustering_data_clean)
dist_matrix <- dist(t(clustering_data_clean))
gene_cluster <- hclust(dist_matrix)
clustering_data_numeric <- clustering_data[, -1] # Remove the first column (ID)
dist_matrix <- dist(t(clustering_data_numeric))
gene_cluster <- hclust(dist_matrix)
plot(gene_cluster, labels = FALSE, hang = -1, cex = 0.7)
gene_cluster
set.seed(123) # for reproducibility
k <- 1 # for example, you can change this based on your data
kmeans_result <- kmeans(t(sig_gene_data[, -c(1, ncol(sig_gene_data))]), centers=k) # excluding the ID and Gene Symbol columns
ordered_data <- sig_gene_data[order(kmeans_result$cluster), ]
heatmap.2(as.matrix(ordered_data[, -c(1, ncol(ordered_data))]),
scale="row",
trace="none",
margin=c(5,10),
cexRow=0.5,
cexCol=0.5,
col=colorRampPalette(c("blue", "white", "red"))(255),
main=paste("K-means clustering with k =", k),
labRow=ordered_data$`Gene Symbol`)
library(STRINGdb)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("STRINGdb")
library(STRINGdb)
string_db <- STRINGdb$new(version="11", species=9606, score_threshold=900)
interactions <- string_db$get_interactions(significant_gene_symbols)
library(igraph)
View(interactions)
graph <- graph_from_data_frame(interactions, directed=FALSE)
plot(graph, layout=layout_with_fr, vertex.size=10, vertex.label.cex=0.7)
View(interactions)
string_db <- STRINGdb$new(version="11", species=9606, score_threshold=700)
interactions <- string_db$get_interactions(significant_gene_symbols)
View(interactions)
View(interactions)
valid_genes <- string_db$map_ids(significant_gene_symbols)
string_db
valid_genes <- string_db$map_ids(significant_gene_symbols)
all_human_proteins <- string_db$get_proteins()
View(all_human_proteins)
valid_genes <- intersect(significant_gene_symbols, all_human_proteins$protein_external_id)
significant_gene_symbols
entrez_ids <- mapIds(org.Hs.eg.db, keys=significant_gene_symbols, column="ENTREZID", keytype="SYMBOL")
View(entrez_ids)
interactions <- string_db$get_interactions(query = entrez_ids)
interactions <- string_db$get_interactions(entrez_ids)
View(interactions)
View(sig_gene_data)
View(all_human_proteins)
View(entrez_ids)
#Data preparation
matching_rows <- normalized.expr$`Gene Symbol` %in% significant_gene_symbols
sig_gene_data <- normalized.expr[matching_rows, ]
#eucledian distance
numeric_data <- sig_gene_data[, -c(1, ncol(sig_gene_data))] # excluding the ID and Gene Symbol columns
dist_matrix <- dist(t(numeric_data))
#hierarchical clustering
gene_cluster <- hclust(dist_matrix)
library(gplots)
heatmap.2(as.matrix(numeric_data),
Rowv=as.dendrogram(gene_cluster),
scale="row",
trace="none",
margin=c(5,10),
cexRow=0.5,
cexCol=0.5,
col=colorRampPalette(c("blue", "white", "red"))(255))
set.seed(123) # for reproducibility
k <- 1 # for example, you can change this based on your data
kmeans_result <- kmeans(t(sig_gene_data[, -c(1, ncol(sig_gene_data))]), centers=k) # excluding the ID and Gene Symbol columns
ordered_data <- sig_gene_data[order(kmeans_result$cluster), ]
library(gplots)
heatmap.2(as.matrix(ordered_data[, -c(1, ncol(ordered_data))]),
scale="row",
trace="none",
margin=c(5,10),
cexRow=0.5,
cexCol=0.5,
col=colorRampPalette(c("blue", "white", "red"))(255),
main=paste("K-means clustering with k =", k),
labRow=ordered_data$`Gene Symbol`)
dist_matrix <- dist(t(clustering_data))
gene_cluster <- hclust(dist_matrix)
summary(clustering_data)
clustering_data_numeric <- clustering_data[, -1] # Remove the first column (ID)
dist_matrix <- dist(t(clustering_data_numeric))
gene_cluster <- hclust(dist_matrix)
plot(gene_cluster, labels = FALSE, hang = -1, cex = 0.7)
plot(gene_cluster, labels = TRUE, hang = -1, cex = 0.7)
plot(gene_cluster, labels = FALSE, hang = -1, cex = 0.7)
set.seed(123) # for reproducibility
k <- 3 # for example, you can change this based on your data
kmeans_result <- kmeans(t(sig_gene_data[, -c(1, ncol(sig_gene_data))]), centers=k) # excluding the ID and Gene Symbol columns
ordered_data <- sig_gene_data[order(kmeans_result$cluster), ]
library(gplots)
heatmap.2(as.matrix(ordered_data[, -c(1, ncol(ordered_data))]),
scale="row",
trace="none",
margin=c(5,10),
cexRow=0.5,
cexCol=0.5,
col=colorRampPalette(c("blue", "white", "red"))(255),
main=paste("K-means clustering with k =", k),
labRow=ordered_data$`Gene Symbol`)
set.seed(123) # for reproducibility
k <- 4 # for example, you can change this based on your data
kmeans_result <- kmeans(t(sig_gene_data[, -c(1, ncol(sig_gene_data))]), centers=k) # excluding the ID and Gene Symbol columns
ordered_data <- sig_gene_data[order(kmeans_result$cluster), ]
library(gplots)
heatmap.2(as.matrix(ordered_data[, -c(1, ncol(ordered_data))]),
scale="row",
trace="none",
margin=c(5,10),
cexRow=0.5,
cexCol=0.5,
col=colorRampPalette(c("blue", "white", "red"))(255),
main=paste("K-means clustering with k =", k),
labRow=ordered_data$`Gene Symbol`)
View(ordered_data)
set.seed(123) # for reproducibility
k <- 5 # for example, you can change this based on your data
kmeans_result <- kmeans(t(sig_gene_data[, -c(1, ncol(sig_gene_data))]), centers=k) # excluding the ID and Gene Symbol columns
ordered_data <- sig_gene_data[order(kmeans_result$cluster), ]
library(gplots)
heatmap.2(as.matrix(ordered_data[, -c(1, ncol(ordered_data))]),
scale="row",
trace="none",
margin=c(5,10),
cexRow=0.5,
cexCol=0.5,
col=colorRampPalette(c("blue", "white", "red"))(255),
main=paste("K-means clustering with k =", k),
labRow=ordered_data$`Gene Symbol`)
set.seed(123) # for reproducibility
k <- 1 # for example, you can change this based on your data
kmeans_result <- kmeans(t(sig_gene_data[, -c(1, ncol(sig_gene_data))]), centers=k) # excluding the ID and Gene Symbol columns
ordered_data <- sig_gene_data[order(kmeans_result$cluster), ]
heatmap.2(as.matrix(ordered_data[, -c(1, ncol(ordered_data))]),
scale="row",
trace="none",
margin=c(5,10),
cexRow=0.5,
cexCol=0.5,
col=colorRampPalette(c("blue", "white", "red"))(255),
main=paste("K-means clustering with k =", k),
labRow=ordered_data$`Gene Symbol`)
View(numeric_data)
View(gene_cluster)
#Data preparation
matching_rows <- normalized.expr$`Gene Symbol` %in% significant_gene_symbols
sig_gene_data <- normalized.expr[matching_rows, ]
#eucledian distance
numeric_data <- sig_gene_data[, -c(1, ncol(sig_gene_data))] # excluding the ID and Gene Symbol columns
dist_matrix <- dist(t(numeric_data))
#hierarchical clustering
gene_cluster <- hclust(dist_matrix)
library(gplots)
heatmap.2(as.matrix(numeric_data),
Rowv=as.dendrogram(gene_cluster),
scale="row",
trace="none",
margin=c(5,10),
cexRow=0.5,
cexCol=0.5,
col=colorRampPalette(c("blue", "white", "red"))(255))
gene_cluster
dist_matrix
hclust?
?hclust
sig_gene_data
set.seed(123) # Setting seed for reproducibility
# Compute and plot wss (within-cluster sum of squares) for k = 1 to k = 10
wss <- sapply(1:10, function(k){
kmeans(sig_gene_data, centers = k, nstart = 20)$tot.withinss
})
View(sig_gene_data)
# Compute and plot wss (within-cluster sum of squares) for k = 1 to k = 10
wss <- sapply(1:10, function(k){
kmeans(numeric_data, centers = k, nstart = 20)$tot.withinss
})
plot(1:10, wss, type = "b", xlab = "Number of clusters (k)", ylab = "Within groups sum of squares")
library(cluster)
# Compute average silhouette for different numbers of clusters
sil_width <- sapply(2:10, function(k) {
model <- kmeans(numeric_data, centers = k, nstart = 20)
silhouette_score <- silhouette(model$cluster, dist(numeric_data))
mean(silhouette_score[, 3])
})
# Find the optimal number of clusters with the maximum average silhouette width
optimal_k <- which.max(sil_width)
# Plot the silhouette width for each k
plot(2:10, sil_width, type = "b", pch = 19, frame = FALSE,
xlab = "Number of clusters k", ylab = "Average silhouette width")
abline(v = optimal_k, lty = 2)
# Print the optimal k
cat("The optimal number of clusters k is:", optimal_k, "\n")
library(NbClust)
install.packages(NbClust)
install.packages("NbClust")
library(NbClust)
# Use NbClust to find the optimal number of clusters
nb <- NbClust(numeric_data, distance = "euclidean", min.nc = 2, max.nc = 10, method = "kmeans")
nc <- NbClust(sig_gene_data, distance = "euclidean", min.nc = 2, max.nc = 5, method = "kmeans", index = c("silhouette", "kl", "ch"))
library(NbClust)
nc <- NbClust(sig_gene_data, distance = "euclidean", min.nc = 2, max.nc = 5, method = "kmeans", index = c("silhouette", "kl", "ch"))
nc <- NbClust(numeric_data, distance = "euclidean", min.nc = 2, max.nc = 5, method = "kmeans", index = c("silhouette", "kl", "ch"))
View(numeric_data)
nc <- NbClust(numeric_data, distance = "euclidean", min.nc = 2, max.nc = 5, method = "kmeans", index = c("silhouette", "kl", "ch"))
nc <- NbClust(numeric_data, distance = "euclidean", min.nc = 2, max.nc = 5, method = "kmeans", index = "all")
library(NbClust)
nc <- NbClust(numeric_data, distance = "euclidean", min.nc = 1, max.nc = 3, method = "kmeans", index = "all")
# The best number of clusters according to the majority rule
best_nc <- nb$Best.nc[1, "Number_clusters"]
# The best number of clusters according to the majority rule
best_nc <- nc$Best.nc[1, "Number_clusters"]
nc <- NbClust(numeric_data, distance = "euclidean", min.nc = 2, max.nc = 3, method = "kmeans", index = "all")
nc <- NbClust(numeric_data, distance = "euclidean", min.nc = 2, max.nc = 4, method = "kmeans", index = "all")
#Data preparation
matching_rows <- normalized.expr$`Gene Symbol` %in% significant_gene_symbols
sig_gene_data <- normalized.expr[matching_rows, ]
#eucledian distance
numeric_data <- sig_gene_data[, -c(1, ncol(sig_gene_data))] # excluding the ID and Gene Symbol columns
dist_matrix <- dist(t(numeric_data))
#hierarchical clustering
gene_cluster <- hclust(dist_matrix)
library(gplots)
heatmap.2(as.matrix(numeric_data),
Rowv=as.dendrogram(gene_cluster),
scale="row",
trace="none",
margin=c(5,10),
cexRow=0.5,
cexCol=0.5,
col=colorRampPalette(c("blue", "white", "red"))(255))
dist_matrix <- dist(t(clustering_data))
gene_cluster <- hclust(dist_matrix)
summary(clustering_data)
clustering_data_numeric <- clustering_data[, -1] # Remove the first column (ID)
dist_matrix <- dist(t(clustering_data_numeric))
gene_cluster <- hclust(dist_matrix)
plot(gene_cluster, labels = FALSE, hang = -1, cex = 0.7)
View(clustering_data)
set.seed(123) # Setting seed for reproducibility
# Compute and plot wss (within-cluster sum of squares) for k = 1 to k = 10
wss <- sapply(1:10, function(k){
kmeans(numeric_data, centers = k, nstart = 20)$tot.withinss
})
plot(1:10, wss, type = "b", xlab = "Number of clusters (k)", ylab = "Within groups sum of squares")
library(cluster)
# Compute average silhouette for different numbers of clusters
sil_width <- sapply(2:10, function(k) {
model <- kmeans(numeric_data, centers = k, nstart = 20)
silhouette_score <- silhouette(model$cluster, dist(numeric_data))
mean(silhouette_score[, 3])
})
# Find the optimal number of clusters with the maximum average silhouette width
optimal_k <- which.max(sil_width)
# Plot the silhouette width for each k
plot(2:10, sil_width, type = "b", pch = 19, frame = FALSE,
xlab = "Number of clusters k", ylab = "Average silhouette width")
# Plot the silhouette width for each k
plot(1:10, sil_width, type = "b", pch = 19, frame = FALSE,
xlab = "Number of clusters k", ylab = "Average silhouette width")
# Plot the silhouette width for each k
plot(1:10, sil_width, type = "b", pch = 19, frame = FALSE,
xlab = "Number of clusters k", ylab = "Average silhouette width")
# Plot the silhouette width for each k
plot(2:10, sil_width, type = "b", pch = 19, frame = FALSE,
xlab = "Number of clusters k", ylab = "Average silhouette width")
abline(v = optimal_k, lty = 2)
# Print the optimal k
cat("The optimal number of clusters k is:", optimal_k, "\n")
set.seed(123) # for reproducibility
k <- 1 # for example, you can change this based on your data
kmeans_result <- kmeans(t(sig_gene_data[, -c(1, ncol(sig_gene_data))]), centers=k) # excluding the ID and Gene Symbol columns
ordered_data <- sig_gene_data[order(kmeans_result$cluster), ]
library(gplots)
heatmap.2(as.matrix(ordered_data[, -c(1, ncol(ordered_data))]),
scale="row",
trace="none",
margin=c(5,10),
cexRow=0.5,
cexCol=0.5,
col=colorRampPalette(c("blue", "white", "red"))(255),
main=paste("K-means clustering with k =", k),
labRow=ordered_data$`Gene Symbol`)
?getGEOSuppfiles
‘??getGEOSuppfiles’
?getGEOSuppfiles
??getGEOSuppfiles
View(sig_gene_data)
View(numeric_data)
install.packages("dbscan")
library(dbscan)
kNNdistplot(numeric_data, k = 4)
abline(h = 0.5, col = "red")  # Adjust the 0.5 to where you see a sharp bend in the plot
dbscan_result <- dbscan(numeric_data, eps = 0.5, minPts = 6)  # Replace 0.5 and 6 with your chosen values
View(dbscan_result)
?dbscan
View(dbscan_result)
set.seed(123)  # For reproducibility
k <- 4  # Assuming minPts = 5
kNNdist <- kNNdistplot(numeric_data, k = k)
abline(h = 0.5, col = "red")  # Adjust the 0.5 based on the plot
dbscan_result <- dbscan(sig_gene_data, eps = 0.5, minPts = 4)
dbscan_result <- dbscan(numeric_data, eps = 0.5, minPts = 4)
View(dbscan_result)
view(dbscan_result)
dbscan_result
# Assuming sig_gene_data has two columns for this example
plot(numeric_data, col=dbscan_result$cluster + 1L, pch=20, cex=1.5)
legend("topright", legend=unique(dbscan_result$cluster), col=1:length(unique(dbscan_result$cluster)), pch=20)
pca_result <- prcomp(numeric_data, scale. = TRUE)
plot(pca_result$x[,1:2], col=dbscan_result$cluster + 1L, pch=20, cex=1.5)
if (!requireNamespace("Rtsne", quietly = TRUE)) {
install.packages("Rtsne")
}
library(Rtsne)
set.seed(123)  # For reproducibility
tsne_result <- Rtsne(numeric_data, dims = 2, perplexity = 30, theta = 0.5, max_iter = 1000)
plot(tsne_result$Y, col=dbscan_result$cluster + 1L, asp=1, pch=20, cex=1.5)
legend("topright", legend=unique(dbscan_result$cluster), col=1:length(unique(dbscan_result$cluster)), pch=20)
# Define a color for each cluster and a distinct color for noise points
cluster_colors <- rainbow(length(unique(dbscan_result$cluster)))
noise_color <- "black"  # Color for noise points
colors <- ifelse(dbscan_result$cluster == -1, noise_color, cluster_colors[dbscan_result$cluster])
plot(tsne_result$Y, col=colors, asp=1, pch=20, cex=1.5)
legend("topright", legend=c("Noise", unique(dbscan_result$cluster)), col=c(noise_color, cluster_colors), pch=20)
dbscan_result
head(normalized.expr)
library(reshape2)
library(ggplot2)
# Boxplot of expression values across samples
ggplot(melt(normalized.expr[, -ncol(normalized.expr)]), aes(x = variable, y = value)) +
geom_boxplot() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = "Distribution of Expression Values Across Samples",
x = "Samples",
y = "Expression Value")
# Load necessary libraries for PCA
library(ggfortify)
# Extract expression data (excluding ID and Gene Symbol columns)
expr_data <- normalized.expr[, -c(1, ncol(normalized.expr))]
# Identify rows with constant values
constant_rows <- which(apply(expr_data, 1, var) == 0)
# Remove constant rows from the data
expr_data <- expr_data[-constant_rows, ]
# Perform PCA
pca_result <- prcomp(t(expr_data), center = TRUE, scale. = TRUE)
# Plot PCA
autoplot(pca_result, label = TRUE, label.size = 3, size = 3) +
labs(title = "PCA of Gene Expression Data",
x = paste("PC1:", round(pca_result$sdev[1]^2/sum(pca_result$sdev^2)*100, 2), "% variance"),
y = paste("PC2:", round(pca_result$sdev[2]^2/sum(pca_result$sdev^2)*100, 2), "% variance")) +
theme(legend.position="none") # Hide legend if not needed
library(clusterProfiler)
library(org.Hs.eg.db)
significant_genes <- rownames(results[results$adj.P.Val < 0.05, ])
barplot(ego, showCategory=10)
length(significant_genes)
head(significant_genes)
# Convert the numeric values in significant_genes to integers
significant_indices <- as.integer(significant_genes)
# Extract the corresponding gene symbols using the indices
significant_gene_symbols <- normalized.expr$`Gene Symbol`[significant_indices]
# Remove duplicates and NA values
significant_gene_symbols <- unique(significant_gene_symbols)
significant_gene_symbols <- significant_gene_symbols[!is.na(significant_gene_symbols)]
# Check the mapped gene symbols
head(significant_gene_symbols)
# Perform GO enrichment analysis
ego <- enrichGO(gene         = significant_gene_symbols,
OrgDb        = org.Hs.eg.db,
keyType      = "SYMBOL",
ont          = "ALL", # "BP" for Biological Process, "MF" for Molecular Function, "CC" for Cellular Component
pAdjustMethod = "BH", # Benjamini & Hochberg method
qvalueCutoff = 0.05,
readable     = TRUE)
# View the results
head(ego)
dotplot(ego)
barplot(ego)
install.packages("UpSetR")
library(UpSetR)
gene_sets <- geneInCategory(ego)
upset(fromList(gene_sets))
avg_expression <- rowMeans(normalized.expr[, 2:(ncol(normalized.expr)-1)])
cnetplot(ego, foldChange=avg_expression)
#Data preparation
matching_rows <- normalized.expr$`Gene Symbol` %in% significant_gene_symbols
sig_gene_data <- normalized.expr[matching_rows, ]
#eucledian distance
numeric_data <- sig_gene_data[, -c(1, ncol(sig_gene_data))] # excluding the ID and Gene Symbol columns
dist_matrix <- dist(t(numeric_data))
#hierarchical clustering
gene_cluster <- hclust(dist_matrix)
library(gplots)
heatmap.2(as.matrix(numeric_data),
Rowv=as.dendrogram(gene_cluster),
scale="row",
trace="none",
margin=c(5,10),
cexRow=0.5,
cexCol=0.5,
col=colorRampPalette(c("blue", "white", "red"))(255))
dist_matrix <- dist(t(clustering_data))
gene_cluster <- hclust(dist_matrix)
summary(clustering_data)
clustering_data_numeric <- clustering_data[, -1] # Remove the first column (ID)
dist_matrix <- dist(t(clustering_data_numeric))
gene_cluster <- hclust(dist_matrix)
plot(gene_cluster, labels = FALSE, hang = -1, cex = 0.7)
set.seed(123) # Setting seed for reproducibility
# Compute and plot wss (within-cluster sum of squares) for k = 1 to k = 10
wss <- sapply(1:10, function(k){
kmeans(numeric_data, centers = k, nstart = 20)$tot.withinss
})
plot(1:10, wss, type = "b", xlab = "Number of clusters (k)", ylab = "Within groups sum of squares")
library(cluster)
# Compute average silhouette for different numbers of clusters
sil_width <- sapply(2:10, function(k) {
model <- kmeans(numeric_data, centers = k, nstart = 20)
silhouette_score <- silhouette(model$cluster, dist(numeric_data))
mean(silhouette_score[, 3])
})
# Find the optimal number of clusters with the maximum average silhouette width
optimal_k <- which.max(sil_width)
# Plot the silhouette width for each k
plot(2:10, sil_width, type = "b", pch = 19, frame = FALSE,
xlab = "Number of clusters k", ylab = "Average silhouette width")
abline(v = optimal_k, lty = 2)
# Print the optimal k
cat("The optimal number of clusters k is:", optimal_k, "\n")
set.seed(123) # for reproducibility
k <- 1 # for example, you can change this based on your data
kmeans_result <- kmeans(t(sig_gene_data[, -c(1, ncol(sig_gene_data))]), centers=k) # excluding the ID and Gene Symbol columns
ordered_data <- sig_gene_data[order(kmeans_result$cluster), ]
library(gplots)
heatmap.2(as.matrix(ordered_data[, -c(1, ncol(ordered_data))]),
scale="row",
trace="none",
margin=c(5,10),
cexRow=0.5,
cexCol=0.5,
col=colorRampPalette(c("blue", "white", "red"))(255),
main=paste("K-means clustering with k =", k),
labRow=ordered_data$`Gene Symbol`)
library(dbscan)
set.seed(123)  # For reproducibility
k <- 4  # Assuming minPts = 5
kNNdist <- kNNdistplot(numeric_data, k = k)
abline(h = 0.5, col = "red")  # Adjust the 0.5 based on the plot
dbscan_result <- dbscan(numeric_data, eps = 0.5, minPts = 4)
# Assuming sig_gene_data has two columns for this example
plot(numeric_data, col=dbscan_result$cluster + 1L, pch=20, cex=1.5)
legend("topright", legend=unique(dbscan_result$cluster), col=1:length(unique(dbscan_result$cluster)), pch=20)
pca_result <- prcomp(numeric_data, scale. = TRUE)
plot(pca_result$x[,1:2], col=dbscan_result$cluster + 1L, pch=20, cex=1.5)
if (!requireNamespace("Rtsne", quietly = TRUE)) {
install.packages("Rtsne")
}
library(Rtsne)
set.seed(123)  # For reproducibility
tsne_result <- Rtsne(numeric_data, dims = 2, perplexity = 30, theta = 0.5, max_iter = 1000)
plot(tsne_result$Y, col=dbscan_result$cluster + 1L, asp=1, pch=20, cex=1.5)
legend("topright", legend=unique(dbscan_result$cluster), col=1:length(unique(dbscan_result$cluster)), pch=20)
# Define a color for each cluster and a distinct color for noise points
cluster_colors <- rainbow(length(unique(dbscan_result$cluster)))
noise_color <- "black"  # Color for noise points
colors <- ifelse(dbscan_result$cluster == -1, noise_color, cluster_colors[dbscan_result$cluster])
plot(tsne_result$Y, col=colors, asp=1, pch=20, cex=1.5)
legend("topright", legend=c("Noise", unique(dbscan_result$cluster)), col=c(noise_color, cluster_colors), pch=20)
normalized.expr
normalized.expr
View(raw.data)
View(normalized.data)
normalized.expr
View(normalized.expr)
expr_data
View(expr_data)
design
head(results)
View(results)
